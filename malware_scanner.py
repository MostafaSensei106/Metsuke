import tkinter as tk
from tkinter import filedialog, messagebox
import hashlib
import requests
import os
import re
from urllib.parse import urlparse
import threading
import pyperclip
import time


# ------------------- Constants -------------------
VT_API_KEY = os.getenv(
    "VT_API_KEY",
    "ee690a6c4f9175b3300dc38a484b6a919b1d9cfd6c5590ad0d9df25477d855a9",
)
# Replace with your own or use environment variable for security

MAX_FILE_SIZE = 32 * 1024 * 1024  # 32 MB max for VirusTotal file upload
REQUEST_TIMEOUT = 30  # seconds
RETRY_COUNT = 2  # Number of retries for network requests


# ------------------- Global variable -------------------
last_scan_result = ""


# ------------------- Validation Functions -------------------
def is_valid_sha256(hash_str: str) -> bool:
    """Check if input string is valid SHA-256."""
    return bool(re.fullmatch(r"[A-Fa-f0-9]{64}", hash_str.strip()))


def is_valid_url(url: str) -> bool:
    """Validate URL syntax."""
    try:
        parsed = urlparse(url.strip())
        return parsed.scheme in ("http", "https") and bool(parsed.netloc)
    except Exception:
        return False


# ------------------- Hash Calculation -------------------
def calculate_hash(file_path: str) -> str | None:
    """Calculate SHA-256 hash of the specified file."""
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for block in iter(lambda: f.read(8192), b""):
                sha256_hash.update(block)
        return sha256_hash.hexdigest()
    except Exception as e:
        messagebox.showerror("File Error", f"Failed to read file:\n{e}")
        return None


# ------------------- UI Utility Functions -------------------
def set_status(text: str, color="white") -> None:
    """Update status label text and color."""
    status_label.config(text=text, fg=color)
    status_label.update_idletasks()


def display_result(title: str, msg: str, alert: bool = False) -> None:
    """Show result in text box and optionally as popup."""
    global last_scan_result
    last_scan_result = msg
    text_results.config(state="normal")
    text_results.delete(1.0, tk.END)
    text_results.insert(tk.END, msg)
    text_results.config(state="disabled")

    if alert:
        messagebox.showwarning(title, msg)
    else:
        messagebox.showinfo(title, msg)


def enable_controls(enabled: bool) -> None:
    """Enable or disable buttons and inputs during API operations."""
    state = "normal" if enabled else "disabled"
    btn_browse.config(state=state)
    btn_upload.config(state=state)
    btn_vt.config(state=state)
    btn_export.config(state=state)
    btn_copy.config(state=state)
    entry_hash.config(state=state)
    entry_url.config(state=state)


# ------------------- File Browsing -------------------
def browse_file() -> None:
    """Let user pick a file and calculate its SHA-256 hash."""
    file_path = filedialog.askopenfilename()
    if not file_path:
        set_status("No file selected.", "orange")
        return

    set_status("Calculating file hash...", "yellow")
    hash_value = calculate_hash(file_path)
    if hash_value:
        entry_hash.delete(0, tk.END)
        entry_hash.insert(0, hash_value)
        set_status("Hash calculated.", "green")
    else:
        set_status("Failed to calculate hash.", "red")


# ------------------- Export & Copy Results -------------------
def export_results() -> None:
    global last_scan_result
    if not last_scan_result.strip():
        messagebox.showinfo("Export Results", "No results to save.")
        return
    file_path = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")],
        title="Save Scan Results",
    )
    if file_path:
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(last_scan_result)
            messagebox.showinfo("Export Results", f"Results saved to:\n{file_path}")
        except Exception as e:
            messagebox.showerror("Export Error", f"Failed to save file:\n{e}")


def copy_results() -> None:
    global last_scan_result
    if not last_scan_result.strip():
        messagebox.showinfo("Copy Results", "No results to copy.")
        return
    try:
        pyperclip.copy(last_scan_result)
        messagebox.showinfo("Copy Results", "Results copied to clipboard.")
    except Exception as e:
        messagebox.showerror("Copy Error", f"Failed to copy results:\n{e}")


# ------------------- VirusTotal Hash Scan -------------------
def search_virustotal_thread() -> None:
    threading.Thread(target=search_virustotal, daemon=True).start()


def search_virustotal() -> None:
    set_status("Starting VirusTotal hash scan...", "yellow")
    enable_controls(False)
    try:
        hash_value = entry_hash.get().strip()
        if not hash_value:
            set_status("Please enter or extract a hash first.", "red")
            return
        if not is_valid_sha256(hash_value):
            set_status("Invalid SHA-256 hash format.", "red")
            return
        if not VT_API_KEY or VT_API_KEY == "YOUR_VT_API_KEY":
            set_status("VirusTotal API key missing or invalid.", "red")
            return

        url = f"https://www.virustotal.com/api/v3/files/{hash_value}"
        headers = {"x-apikey": VT_API_KEY}

        for attempt in range(RETRY_COUNT + 1):
            try:
                response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
                break  # success, exit retry loop
            except requests.Timeout:
                if attempt < RETRY_COUNT:
                    set_status(f"Timeout, retrying... ({attempt + 1})", "orange")
                    time.sleep(2)
                else:
                    raise
            except requests.RequestException as e:
                set_status("Network error.", "red")
                display_result("Network Error", f"VirusTotal request failed:\n{e}")
                return

        if response.status_code == 200:
            data = response.json().get("data", {}).get("attributes", {})
            stats = data.get("last_analysis_stats", {})
            total = sum(stats.values())
            malicious = stats.get("malicious", 0)
            msg = (
                f"🔍 VirusTotal File Scan Results:\n"
                f"Total Scanners: {total}\n"
                f"❗ Malicious: {malicious}\n"
                f"⚠️ Suspicious: {stats.get('suspicious', 0)}\n"
                f"✅ Harmless: {stats.get('harmless', 0)}\n"
                f"❔ Undetected: {stats.get('undetected', 0)}"
            )
            set_status("VirusTotal scan complete.", "green")

            if malicious > 0:
                display_result("VirusTotal Alert", msg, alert=True)
            else:
                display_result("VirusTotal Scan", msg)

        elif response.status_code == 404:
            set_status("Hash not found in VirusTotal database.", "orange")
            display_result("VirusTotal", "⚠️ Hash not found in VirusTotal database.")

        else:
            set_status("VirusTotal API error.", "red")
            display_result(
                "VirusTotal Error", f"HTTP {response.status_code}:\n{response.text}"
            )
    finally:
        enable_controls(True)


# ------------------- VirusTotal File Upload -------------------
def upload_file_virustotal_thread() -> None:
    threading.Thread(target=upload_file_virustotal, daemon=True).start()


def upload_file_virustotal() -> None:
    set_status("Starting file upload to VirusTotal...", "yellow")
    enable_controls(False)
    try:
        file_path = filedialog.askopenfilename()
        if not file_path:
            set_status("No file selected.", "orange")
            return

        if not VT_API_KEY or VT_API_KEY == "YOUR_VT_API_KEY":
            set_status("VirusTotal API key missing or invalid.", "red")
            return

        try:
            file_size = os.path.getsize(file_path)
        except Exception as e:
            set_status("File error.", "red")
            messagebox.showerror("File Error", f"Could not read file size:\n{e}")
            return

        if file_size > MAX_FILE_SIZE:
            set_status("File too large for VirusTotal upload (>32MB).", "red")
            messagebox.showerror(
                "File Size Error",
                "File size exceeds 32MB limit for VirusTotal upload.",
            )
            return

        url = "https://www.virustotal.com/api/v3/files"
        headers = {"x-apikey": VT_API_KEY}

        for attempt in range(RETRY_COUNT + 1):
            try:
                with open(file_path, "rb") as f:
                    files = {"file": (os.path.basename(file_path), f)}
                    response = requests.post(
                        url, headers=headers, files=files, timeout=REQUEST_TIMEOUT
                    )
                break  # success, exit retry loop
            except requests.Timeout:
                if attempt < RETRY_COUNT:
                    set_status(f"Timeout, retrying... ({attempt + 1})", "orange")
                    time.sleep(2)
                else:
                    raise
            except requests.RequestException as e:
                set_status("Network error during upload.", "red")
                display_result("Network Error", f"Upload request failed:\n{e}")
                return

        if response.status_code == 200:
            data = response.json()
            analysis_id = data.get("data", {}).get("id")
            msg = (
                f"File uploaded successfully.\n"
                f"Analysis ID:\n{analysis_id}\n\n"
                "You can check the results on VirusTotal website using this ID."
            )
            set_status("File uploaded successfully.", "green")
            display_result("VirusTotal Upload Success", msg)

        else:
            set_status("Upload failed.", "red")
            display_result(
                "VirusTotal Upload Error",
                f"HTTP {response.status_code}:\n{response.text}",
            )
    finally:
        enable_controls(True)


# ------------------- GUI Setup -------------------
root = tk.Tk()
root.title("Malware Hash & URL Scanner - by Odo")
root.geometry("720x400")
root.resizable(False, False)

frame = tk.Frame(root)
frame.pack(padx=20, pady=10, fill="both", expand=True)

btn_browse = tk.Button(frame, text="📁 Select File", command=browse_file)
btn_browse.grid(row=0, column=0, padx=5, pady=5, sticky="w")

entry_hash = tk.Entry(frame, width=80)
entry_hash.grid(row=0, column=1, padx=5, pady=5)

btn_upload = tk.Button(frame, text="⬆️ Upload & Scan File", command=upload_file_virustotal_thread)
btn_upload.grid(row=0, column=2, padx=5, pady=5)

btn_vt = tk.Button(frame, text="🔍 Scan Hash on VirusTotal", command=search_virustotal_thread)
btn_vt.grid(row=1, column=0, padx=5, pady=10, sticky="w")

btn_export = tk.Button(frame, text="💾 Save Results", command=export_results)
btn_export.grid(row=1, column=1, padx=5, pady=10, sticky="w")

btn_copy = tk.Button(frame, text="📋 Copy Results", command=copy_results)
btn_copy.grid(row=1, column=1, padx=5, pady=10, sticky="e")

label_url = tk.Label(frame, text="🔗 URL:")
label_url.grid(row=2, column=0, padx=5, pady=5, sticky="w")

entry_url = tk.Entry(frame, width=80)
entry_url.grid(row=2, column=1, padx=5, pady=5)

text_results = tk.Text(frame, height=10, width=85, state="disabled", bg="#222222", fg="white")
text_results.grid(row=4, column=0, columnspan=3, padx=5, pady=5)

status_label = tk.Label(root, text="Ready", fg="white", bg="#1e1e1e")
status_label.pack(fill="x")


# ------------------- Dark Mode Styling -------------------
def set_dark_mode(widget: tk.Widget) -> None:
    """Apply consistent dark theme colors recursively."""
    bg, fg, accent = "#1e1e1e", "#ffffff", "#333333"
    if isinstance(widget, (tk.Tk, tk.Frame)):
        widget.configure(bg=bg)
    elif isinstance(widget, tk.Label):
        widget.configure(bg=bg, fg=fg)
    elif isinstance(widget, tk.Entry):
        widget.configure(bg=accent, fg=fg, insertbackground=fg)
    elif isinstance(widget, tk.Button):
        widget.configure(bg=accent, fg=fg, activebackground="#444", activeforeground=fg, borderwidth=0)
    elif isinstance(widget, tk.Text):
        widget.configure(bg="#222222", fg=fg, insertbackground=fg)
    for child in widget.winfo_children():
        set_dark_mode(child)


set_dark_mode(root)

root.mainloop()
