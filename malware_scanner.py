import tkinter as tk
from tkinter import filedialog, messagebox
import hashlib
import requests
import os
import re
import base64
from urllib.parse import urlparse

# ------------------- Constants -------------------
VT_API_KEY = os.getenv("VT_API_KEY", "ee690a6c4f9175b3300dc38a484b6a919b1d9cfd6c5590ad0d9df25477d855a9")
HA_API_KEY = os.getenv("HA_API_KEY", "PUT-YOUR-WORKING-HA-API-KEY")

# ------------------- Input Validation -------------------
def is_valid_sha256(hash_str):
    """Check if input is a valid SHA-256 hex string."""
    return bool(re.fullmatch(r"[A-Fa-f0-9]{64}", hash_str))

def is_valid_url(url):
    """Basic URL validation."""
    try:
        parsed = urlparse(url)
        return parsed.scheme in ("http", "https") and bool(parsed.netloc)
    except Exception:
        return False

# ------------------- Hash Calculation -------------------
def calculate_hash(file_path):
    """Calculate SHA256 hash of a file."""
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(block)
        return sha256_hash.hexdigest()
    except Exception as e:
        messagebox.showerror("File Error", f"Error reading file:\n{e}")
        return None

# ------------------- File Selection -------------------
def browse_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        hash_value = calculate_hash(file_path)
        if hash_value:
            entry_hash.delete(0, tk.END)
            entry_hash.insert(0, hash_value)

# ------------------- VirusTotal Scan by Hash -------------------
def search_virustotal():
    hash_value = entry_hash.get().strip()
    if not hash_value:
        messagebox.showerror("Input Error", "Please enter or extract a hash first.")
        return
    if not is_valid_sha256(hash_value):
        messagebox.showerror("Input Error", "Invalid SHA-256 hash format.")
        return
    if not VT_API_KEY or VT_API_KEY == "YOUR_VT_API_KEY":
        messagebox.showerror("API Key Error", "VirusTotal API key is missing or invalid.")
        return

    url = f"https://www.virustotal.com/api/v3/files/{hash_value}"
    headers = {"x-apikey": VT_API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code == 200:
            data = response.json().get("data", {}).get("attributes", {})
            stats = data.get("last_analysis_stats", {})
            msg = (
                f"üîç VirusTotal File Scan Results:\n"
                f"Total Scanners: {sum(stats.values())}\n"
                f"‚ùó Malicious: {stats.get('malicious', 0)}\n"
                f"‚ö†Ô∏è Suspicious: {stats.get('suspicious', 0)}\n"
                f"‚úÖ Harmless: {stats.get('harmless', 0)}\n"
                f"‚ùî Undetected: {stats.get('undetected', 0)}"
            )
            messagebox.showinfo("VirusTotal", msg)
        elif response.status_code == 404:
            messagebox.showinfo("VirusTotal", "‚ö†Ô∏è Hash not found in VirusTotal database.")
        else:
            messagebox.showerror("VirusTotal Error", f"Error {response.status_code}: {response.text}")
    except requests.exceptions.RequestException as e:
        messagebox.showerror("Network Error", f"VirusTotal request failed:\n{e}")

# ------------------- VirusTotal Scan by URL -------------------
def search_virustotal_url():
    url_to_scan = entry_url.get().strip()
    if not url_to_scan:
        messagebox.showerror("Input Error", "Please enter a URL first.")
        return
    if not is_valid_url(url_to_scan):
        messagebox.showerror("Input Error", "Invalid URL format. Make sure it starts with http:// or https://")
        return
    if not VT_API_KEY or VT_API_KEY == "YOUR_VT_API_KEY":
        messagebox.showerror("API Key Error", "VirusTotal API key is missing or invalid.")
        return

    headers = {"x-apikey": VT_API_KEY}
    submit_url = "https://www.virustotal.com/api/v3/urls"

    try:
        # Submit URL for scanning
        response_post = requests.post(submit_url, headers=headers, data={"url": url_to_scan}, timeout=15)
        if response_post.status_code not in (200, 201):
            messagebox.showerror("VirusTotal Error", f"Error submitting URL for scan:\n{response_post.status_code} {response_post.text}")
            return

        # Encode URL to base64 (URL safe, no trailing '=')
        url_bytes = url_to_scan.encode('utf-8')
        url_b64 = base64.urlsafe_b64encode(url_bytes).rstrip(b'=').decode('utf-8')

        # Retrieve scan report
        report_url = f"https://www.virustotal.com/api/v3/urls/{url_b64}"
        response_get = requests.get(report_url, headers=headers, timeout=15)

        if response_get.status_code == 200:
            data = response_get.json().get("data", {}).get("attributes", {})
            stats = data.get("last_analysis_stats", {})
            msg = (
                f"üîç VirusTotal URL Scan Results:\n"
                f"Total Scanners: {sum(stats.values())}\n"
                f"‚ùó Malicious: {stats.get('malicious', 0)}\n"
                f"‚ö†Ô∏è Suspicious: {stats.get('suspicious', 0)}\n"
                f"‚úÖ Harmless: {stats.get('harmless', 0)}\n"
                f"‚ùî Undetected: {stats.get('undetected', 0)}"
            )
            messagebox.showinfo("VirusTotal URL Scan", msg)
        elif response_get.status_code == 404:
            messagebox.showinfo("VirusTotal URL Scan", "‚ö†Ô∏è URL not found in VirusTotal database.")
        else:
            messagebox.showerror("VirusTotal Error", f"Error fetching URL scan report:\n{response_get.status_code} {response_get.text}")
    except requests.exceptions.RequestException as e:
        messagebox.showerror("Network Error", f"VirusTotal request failed:\n{e}")

# ------------------- Hybrid Analysis Scan -------------------
def search_hybrid():
    hash_value = entry_hash.get().strip()

    if not hash_value:
        messagebox.showerror("Input Error", "Please enter or extract a hash first.")
        return
    if not is_valid_sha256(hash_value):
        messagebox.showerror("Input Error", "Invalid SHA-256 hash format.")
        return
    if not HA_API_KEY or "..." in HA_API_KEY:
        messagebox.showerror("API Key Error", "Hybrid Analysis API key is missing or invalid.")
        return

    url = "https://www.hybrid-analysis.com/api/v2/search/hash"
    headers = {
        "api-key": HA_API_KEY,
        "User-Agent": "Falcon Sandbox"
    }

    try:
        response = requests.post(url, headers=headers, json={"hash": hash_value}, timeout=15)
        if response.status_code == 200:
            results = response.json()
            if not results:
                messagebox.showinfo("Hybrid Analysis", "‚ö†Ô∏è Hash not found in Hybrid Analysis.")
            else:
                report = results[0]
                score = report.get("threat_score", "Unknown")
                env = report.get("environment_description", "Unknown")
                sha256 = report.get("sha256", "")
                link = f"https://www.hybrid-analysis.com/sample/{sha256}"
                msg = (
                    f"üîç Hybrid Analysis Results:\n"
                    f"üíÄ Threat Score: {score}\n"
                    f"üíª Environment: {env}\n"
                    f"üîó Link: {link}"
                )
                messagebox.showinfo("Hybrid Analysis", msg)
        else:
            messagebox.showerror("Hybrid Analysis Error", f"Status Code {response.status_code}\n{response.text}")
    except requests.exceptions.RequestException as e:
        messagebox.showerror("Network Error", f"Hybrid Analysis request failed:\n{e}")

# ------------------- Dark Mode GUI -------------------
def set_dark_mode(widget):
    bg, fg, accent = "#1e1e1e", "#ffffff", "#333333"
    if isinstance(widget, (tk.Tk, tk.Frame)):
        widget.configure(bg=bg)
    elif isinstance(widget, tk.Label):
        widget.configure(bg=bg, fg=fg)
    elif isinstance(widget, tk.Entry):
        widget.configure(bg=accent, fg=fg, insertbackground=fg)
    elif isinstance(widget, tk.Button):
        widget.configure(bg=accent, fg=fg, activebackground="#444", activeforeground=fg, borderwidth=0)
    for child in widget.winfo_children():
        set_dark_mode(child)

# ------------------- GUI Setup -------------------
root = tk.Tk()
root.title("Malware Hash & URL Scanner - by Odo")
root.geometry("720x280")
root.resizable(False, False)

frame = tk.Frame(root)
frame.pack(padx=20, pady=15, fill="both", expand=True)

# File hash input and browse
btn_browse = tk.Button(frame, text="üìÅ Select File", command=browse_file)
btn_browse.grid(row=0, column=0, padx=5, pady=5, sticky="w")

entry_hash = tk.Entry(frame, width=80)
entry_hash.grid(row=0, column=1, padx=5, pady=5)

btn_vt = tk.Button(frame, text="üîç Scan Hash on VirusTotal", command=search_virustotal)
btn_vt.grid(row=1, column=0, padx=5, pady=10, sticky="w")

btn_ha = tk.Button(frame, text="üîç Scan Hash on Hybrid Analysis", command=search_hybrid)
btn_ha.grid(row=1, column=1, padx=5, pady=10, sticky="w")

# URL input and scan
label_url = tk.Label(frame, text="üîó URL:")
label_url.grid(row=2, column=0, padx=5, pady=5, sticky="w")

entry_url = tk.Entry(frame, width=80)
entry_url.grid(row=2, column=1, padx=5, pady=5)

btn_vt_url = tk.Button(frame, text="üîç Scan URL on VirusTotal", command=search_virustotal_url)
btn_vt_url.grid(row=3, column=0, padx=5, pady=10, sticky="w")

frame.grid_columnconfigure(0, weight=1)
frame.grid_columnconfigure(1, weight=3)

set_dark_mode(root)
root.mainloop()
