import tkinter as tk
from tkinter import filedialog, messagebox
import hashlib
import requests
import os
import re
import base64
from urllib.parse import urlparse
import threading  # For running API calls async
import pyperclip  # For clipboard copy (ÿ™ÿ£ŸÉÿØ ÿ•ŸÜ ŸÖŸÉÿ™ÿ®ÿ© pyperclip ŸÖÿ´ÿ®ÿ™ÿ©)


# ------------------- Constants -------------------
VT_API_KEY = os.getenv("VT_API_KEY", "ee690a6c4f9175b3300dc38a484b6a919b1d9cfd6c5590ad0d9df25477d855a9")
HA_API_KEY = os.getenv("HA_API_KEY", "PUT-YOUR-WORKING-HA-API-KEY")

# ------------------- Global variable to hold last scan result -------------------
last_scan_result = ""  # Store last result to export or copy


# ------------------- Input Validation -------------------
def is_valid_sha256(hash_str):
    return bool(re.fullmatch(r"[A-Fa-f0-9]{64}", hash_str))

def is_valid_url(url):
    try:
        parsed = urlparse(url)
        return parsed.scheme in ("http", "https") and bool(parsed.netloc)
    except Exception:
        return False


# ------------------- Hash Calculation -------------------
def calculate_hash(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(block)
        return sha256_hash.hexdigest()
    except Exception as e:
        messagebox.showerror("File Error", f"Error reading file:\n{e}")
        return None


# ------------------- File Selection -------------------
def browse_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        hash_value = calculate_hash(file_path)
        if hash_value:
            entry_hash.delete(0, tk.END)
            entry_hash.insert(0, hash_value)


# ------------------- Helper to update status label -------------------
def set_status(text, color="white"):
    status_label.config(text=text, fg=color)


# ------------------- Show result in Text widget and update globals -------------------
def display_result(title, msg, alert=False):
    global last_scan_result
    last_scan_result = msg
    text_results.config(state="normal")
    text_results.delete(1.0, tk.END)
    text_results.insert(tk.END, msg)
    text_results.config(state="disabled")

    # Show popup message
    if alert:
        messagebox.showwarning(title, msg)
    else:
        messagebox.showinfo(title, msg)


# ------------------- Export Results to File -------------------
def export_results():
    global last_scan_result
    if not last_scan_result.strip():
        messagebox.showinfo("Export Results", "No results to save.")
        return
    file_path = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")],
        title="Save Scan Results"
    )
    if file_path:
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(last_scan_result)
            messagebox.showinfo("Export Results", f"Results saved to:\n{file_path}")
        except Exception as e:
            messagebox.showerror("Export Error", f"Failed to save file:\n{e}")


# ------------------- Copy Results to Clipboard -------------------
def copy_results():
    global last_scan_result
    if not last_scan_result.strip():
        messagebox.showinfo("Copy Results", "No results to copy.")
        return
    try:
        pyperclip.copy(last_scan_result)
        messagebox.showinfo("Copy Results", "Results copied to clipboard.")
    except Exception as e:
        messagebox.showerror("Copy Error", f"Failed to copy:\n{e}")


# ------------------- VirusTotal Scan by Hash (with threading and status) -------------------
def search_virustotal_thread():
    threading.Thread(target=search_virustotal).start()

def search_virustotal():
    set_status("VirusTotal scanning hash...", "yellow")
    hash_value = entry_hash.get().strip()
    if not hash_value:
        set_status("Please enter or extract a hash first.", "red")
        return
    if not is_valid_sha256(hash_value):
        set_status("Invalid SHA-256 hash format.", "red")
        return
    if not VT_API_KEY or VT_API_KEY == "YOUR_VT_API_KEY":
        set_status("VirusTotal API key missing or invalid.", "red")
        return

    url = f"https://www.virustotal.com/api/v3/files/{hash_value}"
    headers = {"x-apikey": VT_API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code == 200:
            data = response.json().get("data", {}).get("attributes", {})
            stats = data.get("last_analysis_stats", {})
            total = sum(stats.values())
            malicious = stats.get("malicious", 0)
            msg = (
                f"üîç VirusTotal File Scan Results:\n"
                f"Total Scanners: {total}\n"
                f"‚ùó Malicious: {malicious}\n"
                f"‚ö†Ô∏è Suspicious: {stats.get('suspicious', 0)}\n"
                f"‚úÖ Harmless: {stats.get('harmless', 0)}\n"
                f"‚ùî Undetected: {stats.get('undetected', 0)}"
            )
            set_status("VirusTotal scan complete.", "green")

            # Alert if malicious > 0
            if malicious > 0:
                display_result("VirusTotal Alert", msg, alert=True)
            else:
                display_result("VirusTotal Scan", msg)
        elif response.status_code == 404:
            set_status("Hash not found in VirusTotal database.", "orange")
            display_result("VirusTotal", "‚ö†Ô∏è Hash not found in VirusTotal database.")
        else:
            set_status("VirusTotal error.", "red")
            display_result("VirusTotal Error", f"Error {response.status_code}: {response.text}")
    except requests.exceptions.RequestException as e:
        set_status("Network error.", "red")
        display_result("Network Error", f"VirusTotal request failed:\n{e}")


# ------------------- GUI Setup with enhancements -------------------
root = tk.Tk()
root.title("Malware Hash & URL Scanner - by Odo")
root.geometry("720x400")  # More height for results box and status
root.resizable(False, False)

frame = tk.Frame(root)
frame.pack(padx=20, pady=10, fill="both", expand=True)

btn_browse = tk.Button(frame, text="üìÅ Select File", command=browse_file)
btn_browse.grid(row=0, column=0, padx=5, pady=5, sticky="w")

entry_hash = tk.Entry(frame, width=80)
entry_hash.grid(row=0, column=1, padx=5, pady=5)

btn_vt = tk.Button(frame, text="üîç Scan Hash on VirusTotal", command=search_virustotal_thread)
btn_vt.grid(row=1, column=0, padx=5, pady=10, sticky="w")

# New buttons for export and copy results
btn_export = tk.Button(frame, text="üíæ Save Results", command=export_results)
btn_export.grid(row=1, column=1, padx=5, pady=10, sticky="w")

btn_copy = tk.Button(frame, text="üìã Copy Results", command=copy_results)
btn_copy.grid(row=1, column=1, padx=5, pady=10, sticky="e")

label_url = tk.Label(frame, text="üîó URL:")
label_url.grid(row=2, column=0, padx=5, pady=5, sticky="w")

entry_url = tk.Entry(frame, width=80)
entry_url.grid(row=2, column=1, padx=5, pady=5)

# Text widget to show results (read-only)
text_results = tk.Text(frame, height=10, width=85, state="disabled", bg="#222222", fg="white")
text_results.grid(row=4, column=0, columnspan=2, padx=5, pady=5)

# Status label to show current operation or errors
status_label = tk.Label(root, text="Ready", fg="white", bg="#1e1e1e")
status_label.pack(fill="x")

# Dark mode function (keep as you had it, or you can add this to your code)
def set_dark_mode(widget):
    bg, fg, accent = "#1e1e1e", "#ffffff", "#333333"
    if isinstance(widget, (tk.Tk, tk.Frame)):
        widget.configure(bg=bg)
    elif isinstance(widget, tk.Label):
        widget.configure(bg=bg, fg=fg)
    elif isinstance(widget, tk.Entry):
        widget.configure(bg=accent, fg=fg, insertbackground=fg)
    elif isinstance(widget, tk.Button):
        widget.configure(bg=accent, fg=fg, activebackground="#444", activeforeground=fg, borderwidth=0)
    elif isinstance(widget, tk.Text):
        widget.configure(bg="#222222", fg=fg, insertbackground=fg)
    for child in widget.winfo_children():
        set_dark_mode(child)

set_dark_mode(root)
root.mainloop()
